import sqlite3
from pprint import pprint
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.interpolate import griddata
import numpy as np



database = r"D:\PhD\Year_4\AlgorithmNew\DBAVS_03_33\Databases\AVS_03_33_Static.db"
conn = sqlite3.connect(database)
cur = conn.cursor()

def dataExtraction(query, db):
    conn = sqlite3.connect(db)
    cur = conn.cursor()
    cur.execute(query)
    data = cur.fetchall()
    return data

def chunks(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

def listAvg(lst):
    return sum(lst) / len(lst)

# selectQuery1 = """SELECT runid FROM Runs;"""

# data1 = dataExtraction(selectQuery1, database)


runIDs = ['f6181358bd86a4c1b514a537f26027b9bdc751896b6cd3bae92a8799d6156bef', '4ac712646254419bb0b4cd03af9fbea29fa760c3dc98427a8d080b714c9643ef', '93f9909ced8eb0be4cad46429564697a101874cdc5b2ebacddb8b178dce5e5aa', '21fd52e227457280c6f53c4d7e620b1fc227611d20315dd5b0b8c4c1deb65ac7', '9059125196e11c54aa9b8d76def931beb8b4d32148c42fbdf5959a016c0aaa7e',
          '6062fb46ff1bdff89e764a1e64d49ebe22b48227b1c96d06af89ef75e0e8aa8e', '306c1abd781ad6898eaf9241b29d1add71d946018f4147adb3b2e46f8f1dfbb1', '954fa18a4a37f4637f8cd2e12ac73c9ab75c7cfc08bb6318a5b0711de4f1ab9e', 'b3124fc89e7473bb8389d0b1d1dade1e61c2ff2091ee53e4d8ef0ca6c08507a5', '00a8dd3d7dae94445661c9ddf9d5bb2d80db964485f2c14d12112eddb8a81ab3',
          '75480dc911b84c3ced279c42d08ba66fedbd8e4406cbd2f5ebaa1839ac7fda25', '12f05d62923ad2dace015e28f8a96585af85a3fcaa8630db12986632c37718dc', '1216e34b9cfd0d95e5ddd4f929ecf8ce59fdca992df6482456e8b49c66bbd089', '544d3f6d39180159e4f811c47bda582d8c0c5934f616b374f878b2d044c3b79a', '627f757b555433832094ca405308ff3afc305f483510c17cb636875a70748693',
          'b439e7060fbaa59dfaea16fc0c526270da1b028294e57608b788d4b58dbb3f3c', '7eff0f0c06ec86e34f2e55b95eaa1892389b3226178c474be0ebaaaf72cad99b', 'eaf8c8c85d329d7722b31dba0d2ec6a281f7f059299b5368891ee68c81c72821', 'fa8e2322198fb1f8511aa8a46fa94d470d7e066930b7376aed2d59f5a5a4780a', 'a0d235a3ad7e2e293f460d0d1338645a2bcd804455b07533b34e0c090302ddc6',
          'b44180d16634f266a3357f19cc39ad07f89267c7e5dc1c1b09c5e5003014369e', '69c70b922e7ba691be68b18d8d36240a3bf86315cce319ef076de028876b298b', 'a2387d137f1f5ef007bb61d00efe4fa345a837f70d65d9de72da8f2ea5adc023', 'f830d164261451d0d8fe56f7f33d6d8e958171ead9420d3f55dc2c71d8674b0a', '5971b1cd92204446225b91cebe46b659f5c45b56b299050d6f08c35aa135078a',
          '5b4d5680587272f043521f80333d149864ba31b284d68b2f2f025af5a7c693f2', '662627bfdff686ef76cd22a902766721554ae153db3b99afa88132060a3d4df5', '56d53d6e7d7d7374b54ef79773c4adf00c0346217b543851b920be7d905aafb1', '2fd9bfa5d38030f0906c1ca6f7bf6e370a3bbd0afa9edd04086cc8974c3b2ee2', '5446caaadd3eb057a110c0cabeef23429a115a03f82bc8977a7aa37581c0e0b9',
          'aa6e169b46024ae036279d79d701cef0fe3ad9d12ac2e0351c6f188c6479889c', '4b1157649d056874620a37de8d1e814a6167f71148be66a98da8f9a398ddd088', '9c39d3fdf05880445ef65100843c5b4f3c91ea9c4ad53cdb4d45ef6e8990fb35', '596de469108587f0ac163675863ec0658fb5675b91116460d8adb3b8713014eb', 'e3855e181e6bfd114b4de90c8ec04867b2e1747152da9771cfb1e6fe56e5e1de',
          '55e1f5f1e884a500a32dd5d2ef271f276ce35e5b32901b03b2eff9a0db61f4e5', 'f7d74d0eec4209d0518a87603c98fd3d8de0f46d03623c5f17433e83a9a319ab', '3f1538d9086159e3797e8a1b281dba7471b3e76365a9f2cd0321923c4d365bb1', '393922715d31ba3b698cbc3095862ddc134b04350a0ae3e416e4148a0286235a', 'f233f0b9ba37fc9f66643d2f1b010c33bb6131bf4ae8c9106283bd97cb84951f',
          '6ceefda26fe361c7efde00f0b81345a456a43457ccdfee45c30f5aba13b48e7d', 'd5985390d6a481361fec9cab359d0ae39e29c3b78f66471eecddceff03e9042c', '2717633bec35e8f9ab3d359f72cae2cf3204cdfb29c93657213120f586e71092', '28eb09b10b9313a18cffc63063376614f9ae1d0e30e09d639d6e6dc2cf4d9821', '61e2af38852ca514af267f356b00a2b4a6f884cfedea9ec95032ab563f41478c',
          '7692e99f8b4d1d993ceedd935e1d754278ceb6839617c4d00bd067e3f087cffd', 'f83562373de467bd3b571cb091f1ae50c04bc4a56fa4c10d25dc3160fda20685', '8214a023870889368ddab7a1df77cb513f72479506200f66c5d587a97fcbf5af', '8fff0b3c5423660735a2bcedcccb67aaba5cf17ea892c80c52087da5708a169e', '1735d7b7437d95a213785b9ff25744073845dafdef8cf071422face341effd6c',
          '83e96b8aa97bb24a86a579524dbfdbe9c99bf0adf9af757eacde292fe34a1635', '812df6915d3b698621a94cbbb73003ac8a22e9932896db4e65f2d1dc6fae9c39', 'a7ea7455488fc7cd4f5c474108465557abd89492e569b9cff0ca5ce92d7cdf4b', '75b67c4dc1784cb2f071cb822b457c0fa05d1933337133fb82355081f41ec961', 'd3ece8ee810c291c7e6111a438594335ea76d52585b06b4076259c14f209a965',
          'f79522688235a40cfeda5d00169ade3760ba4be07fab0519c4e9243bf9234ac9', '6315f5f809dc757e143ebde1d324ee2c155cf17a093171b4d10a9f097c980161', '0f8d2c68baa25cb96d00df6baeea7300252e119252ba4537a67f80c1899a1d38', '4b02ea0bd23c3c71c072d60ef7a12f167ef671bf3802974f1f7a06530475fab3', '809c9b668ae8f6c9b74dd3a7184ac4579967eb32e5ca6fea5d6fec9ee1789ebc',
          'af12a622036b30fba0b95e4f6104b3af8cdbad0f2eb1a64349c8a9d837ea1a56', 'a6d01eb952d8f48870734d80b6059946da1d9f14ddbdb75c192d28bc2221f2e3', '0f0a6e13d6d3e9d5cf7fa0f3a2f0bca73bd7014b307f26fce0c8852c327efcd5', '51079e444c311fcd09500ced6994b71c088778f49c375f15ea30596f70d3c3da', '2b3e7aaca1ad7b9d08de26c8c8edc7bb2e6e24cfd88db0806161e692b8cbb6be',
          '36fe5a2fcb5bc3e2a106eb1300e0c66f4b904db5a2359e2e865e9d90103f1476', '8b1d16a470ccaacd26bd01e50cf8cdbd84ed7959d19488a67d0832ab4d250c4d', '9bbb8c40759cf1aac8561ba5d85c9940e0044d62a6caff64bcb11b23be6de468', '4dc7a3714f695a327fc0de1730d494d849301c9bb8fba5c515927dbf29fe9413', '05bf217d536ac45531c3a08a2630f36761bbe3db3bdd9a87ebe57f103a1c36b9',
          'ff797c6916220ce7bd3e325c415e85251b422f58d3ee00b5fbd306e5590a2b97', '48d27d133dc73cbb6e950708a9bde92b5dd66b6f21f5173316934e5752979e9c', 'f2516352e804cf522247b15671c9919022e5435099add951d0ceabf6828df555', 'e77985718973a8ea71b989cd47ce6a75177996d36fdc51d0a486de3c4856a799', '24c58e6480cdc5bad0f3cb33f7f01c118f12cd83ced96561146414463d5e2eb7',
          'd9184855c215e9982d2e0a0252fae528a4aa26b243f797ea85921fb6b5ea78f2', '622e72daf386a23c3e5ca0be43e57bfda8966ad73e996100d062a2248e035281', '9e0cf84f1f5b8ec9e4bfda8f07018f4dff3999e7bfda4b193362d2d8ee244a7b', '0ebd40bb6942585b0e2f3cf1a1f0c82c93f0b3709a11a31b3257c3b339dada54', '05d1a04bee805b712ffab74328af1d15d3b83db7c15fdb8cfffb62a28d528d1b',
          '7b4a46da0d7cca7f52a85dd92c83edcc2a0cb94300f3ba8bd57b28ac5c439e61', '2989e22ae3adc974f36f2d3004b8fe69afad9827e3a350f82165a77380ae09b5', '8efc8d5615c6076c3fa96b18073847f40df5caae5455a3bea6ebd8b94d7f1755', '789f03463d8dd75406171268fde196e468a38afcf0cd0a94fb6f58b84cde86cf', '15a4b9811e5cd54e804e1f0456ec9f7e9de247b3da2390dd726bf47574d93c96',
          '9f10b1760423a231a93c4b48c5cc6c9e4526f4cee4c270f956a0231631ddb69e', '5cb9241dc48f81b16ff292584f5181019ddfd6f22da5db06d9dbfffcd2fe015c', 'b6409cd77628db5f8fd2cbdfd509c881601155098e57e267475c805e8d43a644', '19622ae10b5d9ecf2be3d021b3f86e2487fcf9f400c6cda45c549529afab044d', 'd994ad67bfc78b32ed65fdd5a14d7341f7f211dd2b3f0a3d9fbabe66401d7539',
          'c83607a9bd8b48b302b9a3a9cfee12bd92f398e542340f17194d89c0befa0526', '70c0b4c44ddcf0f3981a2621c21cf02afeefc643c75efa9e0f156f80522cc390', 'c2e47ba0922bfc91d07187322a5c432bffa26d491d5276277632aad2e8efa367', '2f9f8024cc95b94caf18389eab89cdff1804038081062a38675aab6e097bcace', '92ba50be570c8feea474103ac823dbf646a4ee294868cceaf0e24681818b7d2e',
          '29af0a459f1e1f019160a3d0f16a74cdb86b875e774864b81eff77d5578802f8', 'b2d9f6e9d0cf732025c4d389924325bd4fd9cfb248bceb9e1f1bebe0a901815b', '9ead228bdd5b910a8aa31f32a113a655bb9dbf629ee396defa78fbe497c867e6', 'c8d5ef526bd996759fd02025b933b18326d731a939b73eca2dc0f2895644cb2e', 'e9c5f7fb4c5158fb3f6cc82ee90d4c01301fd0c6b4243201c25c3c713a941502',
          'f743c3eb30475bf79442705704fd97ed20de88764861ed3ee510d385bf418892', 'fa48c451fd5ac69f95402f9fd942d3e3eb37e3da1c9301e4a1e78a5fab67d172', 'b44d1cc8b6ddff1d32e1405387bfda4e6a9a3a755fb53c4c01ca2f26f937e043', '9b7b1254ba06b71ae08b1a91d5377580dce5477e59440afacd7c3ee9bf984268', '930ad5923514359980dfb877e06d5c64add8524f26174448e92dfce3a5e6060b',
          '0115fc74edd05f48cb9b425e7294a7c6ad92ee43ffbc8fb2315dd58318d614c4', 'cd66f46fa13e48f33f182d0419d8a2a7f3b91211960c7c9326847738be321d02', 'abe698072e206e2d273fdc4a41c9063d1ef33d94d6e6fe1773217704e3a9a614', 'b6dfed24a18951d9e3696e02821ccc8343c4b4365c6804896dfe6f030ab39fd8', '91dcfdd2acc3457d1a7d582beb12ff064f8a4d9dfa12785f086ddaa37732dc2a',
          'a7a064a055419419e555f12ba42dae22e9d7934a4891b1cdbd678006f723ad48', '9966731d01a3692b67d998c68cc657e703d4152b7ba424e307e77c39c056ee87', 'a07a8dab8c77618099e57e1f191a7a8e861f4f17055e0ab322d8846cc13a85a7', '5fd180f59f3c84788c12ff9356a5cbfbdcbca79bd5542c7716307fc6b7cf7b0c', 'c9869b95bba576c44b46c43184729882b3df252adc2432d0ee235bb3b0b2d051',
          'fb32a2a413f27d059bc510e392d6dd2e42ee61e239ffda46f2cd6678989eac98', '4731c674e847913ea31906b1ae7888549e9d12ca7ce057d061b96af6d7699c8d', 'ee34f19becc89a29f26fb0b019fc3b35919605ab43e1b403262c13738a2968f0', 'e8f3fa5d50a7d768e50aab15fc6474d1d6391ae6b2de95a03f8f7c749677e3b3', '9f5a04cc04908ebcf3a4217ddb1e31e2e65bcaf23e92b41303985b125fd91aa9',
          '372e30a2e333268ecf4a2bb9e4b5018441862baa439a09d8fbf1c8299397a7dc', 'a1b9304aef6c07605cb80a84c60426b6a0212d56e550014fd82f6a04dfb381a5', 'a8eeb864205373e249c6d6e2e16415381e4cf25fbf5339c78677d131257f5d44', 'b53822bc6fbbfe729f8a1b4f720036ecc023b221c0854348a1853deba076c90e', 'a51730915734991549e5556b576d8de5a05ff81796e5f697f917ba8443ab1d9b']

# for i in data1:
#     runIDs.append(i[0])
#
# print(runIDs)

# selectQuery2 = """SELECT MAX(fitness), numEvals FROM AllStructures) WHERE runid = ?"""

# bestFit = []
# numEval = []

# for i in runIDs:
#     selectQuery2 = """SELECT MAX(fitness), numEvals FROM AllStructures WHERE runid = ?"""
#     cur.execute(selectQuery2, (i,))
#     data = cur.fetchall()
#     # print(data)
#     bestFit.append(data[0][0])
#     numEval.append(data[0][1])

# print(bestFit)
# print(numEval)

bestFit1 = [0.06980419587995532, 0.06712508310169195, 0.06452304840071302, 0.07129733290010222, 0.06466707491853291,
            0.06481375967081247, 0.06912010220485384, 0.06599278442814197, 0.07026092420011205, 0.06967952817204294,
            0.06850559993546224, 0.06390574424195185, 0.06777098630416815, 0.06285723534707487, 0.07524057553291903,
            0.07907132062326166, 0.06508846788756621, 0.06563407335685409, 0.07462177802564147, 0.06880505767814457,
            0.07088747417338932, 0.06242223321144831, 0.06297188176386885, 0.061054940972449394, 0.07261833677198103,
            0.06675827325934346, 0.08225368990669825, 0.06203751036026423, 0.0641149793929327, 0.07406371832039248,
            0.07227939855936606, 0.07742306914801408, 0.07899999093870104, 0.06948073558365409, 0.0655940865933906,
            0.06992421536621972, 0.07040986193196395, 0.07095132746031355, 0.069875427834143, 0.07208050406242478,
            0.06757671416714997, 0.06776656867530481, 0.06921616472649834, 0.08326303296688217, 0.06893791925284973,
            0.06802009052276894, 0.06618271877218879, 0.06895243244737088, 0.0665075420517046, 0.07535847385465633,
            0.0787687182732895, 0.065927256445398, 0.07160634902276417, 0.08047574038687103, 0.07372227519945876,
            0.07248963063017447, 0.08091885888937281, 0.06848015399597894, 0.07953798990510196, 0.07118863927272776,
            0.07212610713213817, 0.07214788168624722, 0.07579790368769687, 0.07004793513292222, 0.07077682806284245,
            0.06852625496773376, 0.07690160954299757, 0.07332849223516162, 0.07270053109264674, 0.08130648661442774,
            0.06386673781080636, 0.06715296696447397, 0.06332221201102303, 0.06320888567759657, 0.07087444816180137,
            0.06882808796080972, 0.0639117580071782, 0.06698387595620404, 0.06714072539605122, 0.06779138310915186,
            0.0674681996737022, 0.0660225380213728, 0.06588411882158664, 0.07139407075383727, 0.06710329978597805,
            0.06615406090010538, 0.06915785764420715, 0.06946360144447336, 0.06519847949322004, 0.06559034011706892,
            0.06728746485466368, 0.0655893906589505, 0.06625935407320467, 0.06442816754127476, 0.0662930456904598,
            0.06800137406296487, 0.06139454064518737, 0.06428648485107306, 0.061186754800394615, 0.061463494230870476,
            0.06917302103872533, 0.0631020455739632, 0.06428741638690229, 0.06613767243025398, 0.06705181632273342,
            0.06539727675014459, 0.06933679281402909, 0.06445396339248202, 0.06446934259051203, 0.06293668144394772,
            0.0662960470133379, 0.06306393942456363, 0.06350292148365431, 0.06925011899247946, 0.07038025253982977,
            0.06526854694689892, 0.06538363445406571, 0.06332988149592247, 0.06596363503956632, 0.06667572789808801,
            0.06208518096762387, 0.062024116862169174, 0.07133289007550993, 0.06266023710809171, 0.06455564791747288]

numEval1 = [49482.0, 47640.0, 48845.0, 46105.0, 2391.0,
            33104.0, 31888.0, 32641.0, 36447.0, 32557.0,
            27605.0, 27457.0, 26997.0, 23462.0, 29130.0,
            19300.0, 15875.0, 19050.0, 19524.0, 19089.0,
            8741.0, 8072.0, 9367.0, 1224.0, 7740.0,
            45585.0, 59416.0, 59007.0, 14462.0, 59419.0,
            49672.0, 45524.0, 48021.0, 49636.0, 49178.0,
            39453.0, 35483.0, 34930.0, 38160.0, 38416.0,
            29572.0, 28887.0, 27153.0, 29695.0, 29534.0,
            12752.0, 19660.0, 19619.0, 19509.0, 19746.0,
            60700.0, 68181.0, 69318.0, 68506.0, 69768.0,
            59587.0, 59508.0, 56005.0, 59728.0, 59185.0,
            14549.0, 43175.0, 49063.0, 17388.0, 49647.0,
            39031.0, 39234.0, 28967.0, 38797.0, 39422.0,
            29636.0, 21999.0, 21493.0, 14706.0, 24313.0,
            7286.0, 77435.0, 49556.0, 69191.0, 40056.0,
            38378.0, 272.0, 66689.0, 54101.0, 59706.0,
            32236.0, 55845.0, 50626.0, 40938.0, 43785.0,
            26067.0, 20755.0, 45202.0, 4666.0, 35724.0,
            10669.0, 34328.0, 15879.0, 20982.0, 24463.0,
            65323.0, 42850.0, 42248.0, 62475.0, 75449.0,
            67202.0, 16628.0, 10340.0, 66470.0, 23180.0,
            62973.0, 56458.0, 30388.0, 43686.0, 21803.0,
            41218.0, 13129.0, 58839.0, 32773.0, 15604.0,
            32905.0, 45281.0, 32601.0, 31804.0, 46975.0]

bestRwp1 = [14.325786400000002, 14.8975607, 15.498337799999998, 14.0257701, 15.463819899999999,
            15.428822599999998, 14.4675712, 15.1531718, 14.232662199999998, 14.351417499999998,
            14.597346800000002, 15.648045600000001, 14.7555769, 15.9090675, 13.2907011,
            12.646810399999998, 15.3637047, 15.2359887, 13.4009136, 14.533815299999999,
            14.106864599999998, 16.0199331, 15.880103500000002, 16.3786908, 13.7706266,
            14.979416799999997, 12.1575093, 16.11928, 15.5969792, 13.5018876,
            13.8352009, 12.916047000000002, 12.6582293, 14.3924786, 15.2452767,
            14.3011973, 14.202555899999998, 14.094169, 14.311182499999997, 13.873376899999998,
            14.797996800000002, 14.7565388, 14.447492200000001, 12.010131800000002, 14.5058048,
            14.701538800000002, 15.1096845, 14.5027516, 15.0358887, 13.269907799999999,
            12.695395099999999, 15.168233200000001, 13.965242100000001, 12.426105, 13.564421299999998,
            13.7950765, 12.3580586, 14.6027709, 12.5726084, 14.0471852,
            13.8646052, 13.860420799999998, 13.192976999999999, 14.275938300000002, 14.128918000000002,
            14.5929469, 13.003629, 13.6372639, 13.755057700000002, 12.2991417,
            15.6576026, 14.891374799999998, 15.7922468, 15.8205605, 14.1094573,
            14.5289522, 15.646573200000002, 14.9289659, 14.8940899, 14.7511373,
            14.8217976, 15.1463429, 15.1781646, 14.006765400000003, 14.9023968,
            15.116230000000002, 14.459672900000001, 14.3960287, 15.337781000000001, 15.2461475,
            14.8616091, 15.246368200000001, 15.0922087, 15.521161599999997, 15.084538500000003,
            14.705585199999998, 16.2880932, 15.5553691, 16.3434064, 16.2698202,
            14.456503199999998, 15.8473468, 15.555143700000002, 15.119975699999998, 14.9138391,
            15.2911566, 14.4223573, 15.5149497, 15.5112486, 15.8889852,
            15.083855599999998, 15.856922499999998, 15.747307000000001, 14.4404084, 14.208531,
            15.321315499999999, 15.2943471, 15.790334300000001, 15.159867999999998, 14.9979615,
            16.1069032, 16.1227608, 14.0187787, 15.959084199999998, 15.4905114]

# for i in bestFit1:
#     bestRwp1.append(1/i)
# #
# print(bestRwp1)
#
bestFit2 = list(chunks(bestFit1, 5))
numEval2 = list(chunks(numEval1, 5))
bestRwp2 = list(chunks(bestRwp1, 5))
#
# print(bestFit2)
# print(numEval2)
#
bestFitAvg1 = []
numEvalAvg1 = []
bestRwpAvg1 = []
#
for lst in bestFit2:
    bestFitAvg1.append(listAvg(lst))

for lst in numEval2:
    numEvalAvg1.append(listAvg(lst))

for lst in bestRwp2:
    bestRwpAvg1.append(listAvg(lst))
#
# print("Here1")
# print(bestFitAvg1)
# print(numEvalAvg1)
# print(bestRwpAvg1)
#
numEvalAvg1Chunks = list(chunks(numEvalAvg1, 5))
bestRwpAvg1Chunks = list(chunks(bestRwpAvg1, 5))

# print("Here2")
# print(numEvalAvg1Chunks)
# print(bestRwpAvg1Chunks)
#
xOverRates1 = []
mutRates1 = []
#
for i in runIDs:
    selectQuery3 = """SELECT MAX(crossoverRate), (mutationRate) FROM Generation WHERE id = ?"""
    cur.execute(selectQuery3, (i, ))
    data = cur.fetchall()
    xOverRates1.append(data[0][0])
    mutRates1.append(data[0][1])
#
# print(xOverRates1)
# print(mutRates1)
#
xOverRates2 = list(chunks(xOverRates1, 5))
mutRates2 = list(chunks(mutRates1, 5))
#
xOverRates2Avg = []
mutRates2Avg = []
#
for lst in xOverRates2:
    xOverRates2Avg.append(listAvg(lst))

for lst in mutRates2:
    mutRates2Avg.append(listAvg(lst))
#
# print("Rates")
# print(xOverRates2Avg)
# print(mutRates2Avg)
#
comparison1 = list(zip(xOverRates2Avg, mutRates2Avg, bestRwpAvg1))
comparison2 = list(zip(xOverRates2Avg, mutRates2Avg, numEvalAvg1))
#
print("Comparisons")

pprint(comparison1)
pprint(comparison2)

"""2D contour plot Rwp"""
# #
# xTicks = [0.9, 0.7, 0.5, 0.3, 0.1]
# yTicks = [0.1, 0.3, 0.5, 0.7, 0.9]
# #
# X, Y = np.meshgrid(xTicks, yTicks)
#
# print("X")
# print(X)
# print("Y")
# print(Y)
#
# fig,ax=plt.subplots(1,1)
#
# ax.set_yticks(yTicks)
# ax.set_xticks(xTicks)
#
# ax.set_xlabel("CR")
# ax.set_ylabel("MR")
#
# cp = ax.contourf(X, Y, bestRwpAvg1Chunks, 25)
# cbar = fig.colorbar(cp) # Add a colorbar to a plot
# cbar.set_label("$R_{wp}$ / %")
# plt.title("$R_{wp}$ of Best Solution - AVS-03-33")
#
# plt.savefig(r"D:\PhD\Year_4\AlgorithmNew\DBAVS_03_33\Graphs\Static\rwpBest", dpi=300)

"""2D contour plot numEvals"""
#
xTicks = [0.9, 0.7, 0.5, 0.3, 0.1]
yTicks = [0.1, 0.3, 0.5, 0.7, 0.9]

X, Y = np.meshgrid(xTicks, yTicks)

print("X")
print(X)
print("Y")
print(Y)

fig,ax=plt.subplots(1,1)

ax.set_yticks(yTicks)
ax.set_xticks(xTicks)

ax.set_xlabel("CR")
ax.set_ylabel("MR")

cp = ax.contourf(X, Y, numEvalAvg1Chunks, 25)
cbar = fig.colorbar(cp) # Add a colorbar to a plot
cbar.set_label("numEval")
plt.title("Average numEvals to find Best Solution - AVS-03-33")

plt.savefig(r"D:\PhD\Year_4\AlgorithmNew\DBAVS_03_33\Graphs\Static\NumEvals", dpi=300)


